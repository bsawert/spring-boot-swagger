/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.7).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.sawert.swagger.api;

import com.sawert.swagger.model.Dog;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2019-08-01T16:20:58.572Z")

@Api(value = "dogs", description = "the dogs API")
public interface DogsApi {

    DogsApiDelegate getDelegate();

    @ApiOperation(value = "adds a dog", nickname = "addDog", notes = "Adds a dog", response = Dog.class, tags={ "admins","developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "dog created", response = Dog.class),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing dog already exists") })
    @RequestMapping(value = "/dogs",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Dog> addDog(@ApiParam(value = "Dog to add"  )  @Valid @RequestBody Dog dog) {
        return getDelegate().addDog(dog);
    }


    @ApiOperation(value = "get all dogs", nickname = "fetchDogs", notes = "Fetch all dogs ", response = Dog.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "all dogs", response = Dog.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/dogs",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Dog>> fetchDogs() {
        return getDelegate().fetchDogs();
    }


    @ApiOperation(value = "gets dog by id", nickname = "getDog", notes = "Get a dog by id ", response = Dog.class, tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "found dog for id", response = Dog.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/dogs/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Dog> getDog(@ApiParam(value = "pass an id to get a dog",required=true) @PathVariable("id") Long id) {
        return getDelegate().getDog(id);
    }


    @ApiOperation(value = "searches dogs", nickname = "searchDog", notes = "By passing in the appropriate options, you can search for dogs ", response = Dog.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Dog.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/dogs/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Dog>> searchDog(@ApiParam(value = "optional string to search for dog by name") @Valid @RequestParam(value = "name", required = false) String name,@ApiParam(value = "optional string to search for dog by breed") @Valid @RequestParam(value = "breed", required = false) String breed) {
        return getDelegate().searchDog(name, breed);
    }

}
