/**
 * NOTE: This class is auto generated by the swagger code generator program (1.0.15).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.sawert.swagger.api;

import com.sawert.swagger.model.Breed;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "breeds", description = "the breeds API")
public interface BreedsApi {

    BreedsApiDelegate getDelegate();

    @ApiOperation(value = "adds a breed", nickname = "addBreed", notes = "Adds a breed", response = Breed.class, tags={ "admins","developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 201, message = "breed created", response = Breed.class),
        @ApiResponse(code = 400, message = "invalid input, object invalid"),
        @ApiResponse(code = 409, message = "an existing breed already exists") })
    @RequestMapping(value = "/breeds",
        produces = { "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<Breed> addBreed(@ApiParam(value = "Breed to add"  )  @Valid @RequestBody Breed breed) {
        return getDelegate().addBreed(breed);
    }


    @ApiOperation(value = "get all breeds", nickname = "fetchBreeds", notes = "Fetch all breeds ", response = Breed.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "sll breeds", response = Breed.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/breeds",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Breed>> fetchBreeds() {
        return getDelegate().fetchBreeds();
    }


    @ApiOperation(value = "gets breed by id", nickname = "getBreed", notes = "Get a dog by id ", response = Breed.class, tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "found breed for id", response = Breed.class),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/breeds/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Breed> getBreed(@ApiParam(value = "pass an id to get a breed",required=true) @PathVariable("id") Long id) {
        return getDelegate().getBreed(id);
    }


    @ApiOperation(value = "searches breeds", nickname = "searchBreed", notes = "By passing in the appropriate options, you can search for breeds in the system ", response = Breed.class, responseContainer = "List", tags={ "developers", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "search results matching criteria", response = Breed.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "bad input parameter") })
    @RequestMapping(value = "/breeds/search",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Breed>> searchBreed(@ApiParam(value = "pass an optional search string for looking up breed") @Valid @RequestParam(value = "searchString", required = false) String searchString) {
        return getDelegate().searchBreed(searchString);
    }

}
