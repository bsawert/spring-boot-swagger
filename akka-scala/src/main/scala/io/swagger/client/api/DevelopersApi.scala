/**
 * Dogs API
 * This is the dogs API
 *
 * OpenAPI spec version: 1.0.0
 * Contact: bsawert@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
package io.swagger.client.api

import io.swagger.client.model.Breed
import io.swagger.client.model.Dog
import io.swagger.client.core._
import io.swagger.client.core.CollectionFormats._
import io.swagger.client.core.ApiKeyLocations._

object DevelopersApi {

  /**
   * Adds a breed
   * 
   * Expected answers:
   *   code 201 : Breed (breed created)
   *   code 400 :  (invalid input, object invalid)
   *   code 409 :  (an existing breed already exists)
   * 
   * @param breed Breed to add
   */
  def addBreed(breed: Option[Breed] = None): ApiRequest[Breed] =
    ApiRequest[Breed](ApiMethods.POST, "https://virtserver.swaggerhub.com/brians/Doghouse/1.0.0", "/breeds", "application/json")
      .withBody(breed)
      .withSuccessResponse[Breed](201)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](409)
        /**
   * Adds a dog
   * 
   * Expected answers:
   *   code 201 : Dog (dog created)
   *   code 400 :  (invalid input, object invalid)
   *   code 409 :  (an existing dog already exists)
   * 
   * @param dog Dog to add
   */
  def addDog(dog: Option[Dog] = None): ApiRequest[Dog] =
    ApiRequest[Dog](ApiMethods.POST, "https://virtserver.swaggerhub.com/brians/Doghouse/1.0.0", "/dogs", "application/json")
      .withBody(dog)
      .withSuccessResponse[Dog](201)
      .withErrorResponse[Unit](400)
      .withErrorResponse[Unit](409)
        /**
   * Fetch all breeds 
   * 
   * Expected answers:
   *   code 200 : Seq[Breed] (sll breeds)
   *   code 400 :  (bad input parameter)
   */
  def fetchBreeds(): ApiRequest[Seq[Breed]] =
    ApiRequest[Seq[Breed]](ApiMethods.GET, "https://virtserver.swaggerhub.com/brians/Doghouse/1.0.0", "/breeds", "application/json")
      .withSuccessResponse[Seq[Breed]](200)
      .withErrorResponse[Unit](400)
        /**
   * Fetch all dogs 
   * 
   * Expected answers:
   *   code 200 : Seq[Dog] (all dogs)
   *   code 400 :  (bad input parameter)
   */
  def fetchDogs(): ApiRequest[Seq[Dog]] =
    ApiRequest[Seq[Dog]](ApiMethods.GET, "https://virtserver.swaggerhub.com/brians/Doghouse/1.0.0", "/dogs", "application/json")
      .withSuccessResponse[Seq[Dog]](200)
      .withErrorResponse[Unit](400)
        /**
   * Get a dog by id 
   * 
   * Expected answers:
   *   code 200 : Breed (found breed for id)
   *   code 400 :  (bad input parameter)
   * 
   * @param id pass an id to get a breed
   */
  def getBreed(id: Long): ApiRequest[Breed] =
    ApiRequest[Breed](ApiMethods.GET, "https://virtserver.swaggerhub.com/brians/Doghouse/1.0.0", "/breeds/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Breed](200)
      .withErrorResponse[Unit](400)
        /**
   * Get a dog by id 
   * 
   * Expected answers:
   *   code 200 : Dog (found dog for id)
   *   code 400 :  (bad input parameter)
   * 
   * @param id pass an id to get a dog
   */
  def getDog(id: Long): ApiRequest[Dog] =
    ApiRequest[Dog](ApiMethods.GET, "https://virtserver.swaggerhub.com/brians/Doghouse/1.0.0", "/dogs/{id}", "application/json")
      .withPathParam("id", id)
      .withSuccessResponse[Dog](200)
      .withErrorResponse[Unit](400)
        /**
   * By passing in the appropriate options, you can search for breeds in the system 
   * 
   * Expected answers:
   *   code 200 : Seq[Breed] (search results matching criteria)
   *   code 400 :  (bad input parameter)
   * 
   * @param name optional string to search for breed by name
   * @param akcgroup optional string to search for breed by akcgroup
   */
  def searchBreed(name: Option[String] = None, akcgroup: Option[String] = None): ApiRequest[Seq[Breed]] =
    ApiRequest[Seq[Breed]](ApiMethods.GET, "https://virtserver.swaggerhub.com/brians/Doghouse/1.0.0", "/breeds/search", "application/json")
      .withQueryParam("name", name)
      .withQueryParam("akcgroup", akcgroup)
      .withSuccessResponse[Seq[Breed]](200)
      .withErrorResponse[Unit](400)
        /**
   * By passing in the appropriate options, you can search for dogs 
   * 
   * Expected answers:
   *   code 200 : Seq[Dog] (search results matching criteria)
   *   code 400 :  (bad input parameter)
   * 
   * @param name optional string to search for dog by name
   * @param breed optional string to search for dog by breed
   */
  def searchDog(name: Option[String] = None, breed: Option[String] = None): ApiRequest[Seq[Dog]] =
    ApiRequest[Seq[Dog]](ApiMethods.GET, "https://virtserver.swaggerhub.com/brians/Doghouse/1.0.0", "/dogs/search", "application/json")
      .withQueryParam("name", name)
      .withQueryParam("breed", breed)
      .withSuccessResponse[Seq[Dog]](200)
      .withErrorResponse[Unit](400)
      

}

